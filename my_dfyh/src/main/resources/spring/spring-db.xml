<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
http://www.springframework.org/schema/tx
http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
http://www.springframework.org/schema/aop
http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
http://www.springframework.org/schema/context
http://www.springframework.org/schema/context/spring-context-3.0.xsd">
     
     <bean id="propertyConfigurer" class="com.neo.framework.util.PropertyUtils">
		<property name="locations">
			<list>
				<value>classpath:config.properties</value>
			</list>
		</property>
	</bean>
	
	<bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
		<property name="slowSqlMillis" value="3000" />
		<property name="logSlowSql" value="true" />
		<property name="mergeSql" value="true" />
	</bean>

	<bean id="druid-stat-interceptor"
		class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor">
	</bean>

	<bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut"
		scope="prototype">
		<property name="patterns">
			<list>
				<value>com.neo.hapi.service.*</value>
				<value>com.neo.hapi.dao.*</value>
			</list>
		</property>
	</bean>

	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">

		<!-- 基本属性 url、user、password -->
		<property name="driverClassName" value="${mybatis.driver}" />
		<property name="url" value="${mybatis.url}" />
		<property name="username" value="${mybatis.username}" />
		<property name="password" value="${mybatis.password}" />

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${mybatis.initialSize}" />
		<property name="minIdle" value="${mybatis.minIdle}" />
		<property name="maxActive" value="${mybatis.maxActive}" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="${mybatis.maxWait}" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<!-- <property name="validationQuery" value="SELECT 'x'" /> -->
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="false" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="20" />

		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="config,log4j" />
		<property name="proxyFilters">
			<list>
				<ref bean="stat-filter" />
			</list>
		</property>
	</bean>

	<bean id="configuration" class="org.apache.ibatis.session.Configuration">
		<property name="mapUnderscoreToCamelCase" value="true" />
	 	  
        <property name="logImpl" value="org.apache.ibatis.logging.stdout.StdOutImpl" /> 
		
	</bean>

	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configuration" ref="configuration" />
		<!-- <property name="typeAliasesPackage" value="com.dfyh.entity"></property> -->
		<property name="plugins">
			<list>
				<!-- 分页拦截器 -->
				<bean class="com.neo.framework.interceptor.mybatis.PageInterceptor"></bean>
				<bean class="com.neo.framework.interceptor.mybatis.UpdateInterceptor"></bean>
			</list>
		</property>
	</bean>

	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0">
			<ref bean="sqlSessionFactory" />
		</constructor-arg>
	</bean>

	<!-- DAO接口所在包名，Spring会自动查找其下的类 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.neo.hapi.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean>

	<!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 事务注解驱动，标注@Transactional的类和方法将具有事务性 -->
	<!-- <tx:annotation-driven transaction-manager="transactionManager" /> -->

	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="get*" propagation="SUPPORTS" />
			<tx:method name="find*" propagation="SUPPORTS" />
			<tx:method name="query*" propagation="SUPPORTS" />
			<tx:method name="select*" propagation="SUPPORTS" />
			<tx:method name="list*" propagation="SUPPORTS" />

			<tx:method name="save*" propagation="REQUIRED"
				rollback-for="com.neo.framework.entity.AppException" />
			<tx:method name="insert*" propagation="REQUIRED"
				rollback-for="com.neo.framework.entity.AppException" />
			<tx:method name="delete*" propagation="REQUIRED"
				rollback-for="com.neo.framework.entity.AppException" />
			<tx:method name="remove*" propagation="REQUIRED"
				rollback-for="com.neo.framework.entity.AppException" />
			<tx:method name="update*" propagation="REQUIRED"
				rollback-for="com.neo.framework.entity.AppException" />
			<tx:method name="upsert*" propagation="REQUIRED"
				rollback-for="com.neo.framework.entity.AppException" />
			<tx:method name="trans*" propagation="REQUIRED"
				rollback-for="com.neo.framework.entity.AppException" />
			<tx:method name="test*" propagation="REQUIRED"
				rollback-for="com.neo.framework.entity.AppException" />
			<!-- 开启一个独立新事务 -->
			<tx:method name="newtrans*" propagation="REQUIRES_NEW"
				rollback-for="com.neo.framework.entity.AppException" />
		</tx:attributes>
	</tx:advice>
	
	<aop:config>
		<aop:pointcut id="hapiServiceMethods" expression="execution(* com.neo.hapi.service..*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="hapiServiceMethods" />
		<aop:advisor advice-ref="druid-stat-interceptor" pointcut-ref="druid-stat-pointcut" />
	</aop:config>

</beans>